{"version":3,"sources":["utils/fetchClient.ts","features/users/usersSlice.ts","api/users.ts","features/posts/postsSlice.ts","api/posts.ts","features/selectedPost/selectedPostSlice.ts","features/comments/commentsSlice.ts","api/comments.ts","app/store.ts","app/hooks.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","fetchUsers","createAsyncThunk","usersSlice","createSlice","name","initialState","users","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectUsers","fetchPosts","userId","getUserPosts","postsSlice","posts","loader","setNotPosts","actions","selectedPostSlice","post","setPost","fetchComments","postId","getPostComments","fetchAddComment","newComment","fetchDeleteComment","commentId","deleteComment","commentsSlice","comments","submitting","removeComment","filter","comment","id","push","store","configureStore","reducer","usersReducer","postsReducer","selectedPostReducer","commentsReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","PostsList","selectedPostId","dispatch","equalityId","pressedPostId","data-cy","className","map","title","type","classNames","onClick","selectedPostActions","Loader","NewCommentForm","onSubmit","useState","email","errors","setErrors","setValues","handleChange","event","target","field","value","current","preventDefault","onReset","htmlFor","placeholder","onChange","PostDetails","visible","setVisible","useEffect","length","href","aria-label","commentsActions","UserSelector","selectedUser","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","aria-haspopup","aria-controls","aria-hidden","role","user","App","selectedPost","author","setAuthor","postsActions","Root","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.073817ba.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { User } from '../../types/User';\nimport { getUsers } from '../../api/users';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../app/store';\n\nexport interface UsersState {\n  users: User[],\n  loading: boolean,\n  error: string,\n}\n\nconst initialState: UsersState = {\n  users: [],\n  loading: false,\n  error: '',\n};\n\nexport const fetchUsers = createAsyncThunk(\n  'users/GET_USERS',\n  () => getUsers(),\n);\n\nexport const usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchUsers.pending, (state) => {\n        return {\n          ...state,\n          loading: true,\n        };\n      })\n      .addCase(fetchUsers.fulfilled, (state, action) => {\n        return {\n          ...state,\n          users: [...action.payload],\n          loading: false,\n        };\n      })\n      .addCase(fetchUsers.rejected, (state) => {\n        return {\n          ...state,\n          loading: false,\n          error: 'Something went wrong',\n        };\n      });\n  },\n});\n\nexport const selectUsers = (state: RootState) => state.users.users;\n\nexport default usersSlice.reducer;\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUser = (id: number) => {\n  return client.get<User[]>(`/users/${id}`);\n};\n","/* eslint-disable no-param-reassign */\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\n\nexport const fetchPosts = createAsyncThunk('fetch/POSTS', (userId: number) => {\n  return getUserPosts(userId);\n});\n\nexport interface PostsState {\n  posts: Post[],\n  loader: boolean,\n  error: boolean,\n}\n\nconst initialState: PostsState = {\n  posts: [],\n  loader: false,\n  error: false,\n};\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    setNotPosts: state => {\n      state.posts = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPosts.pending, (state) => {\n        state.loader = true;\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.loader = false;\n        state.posts = action.payload;\n      })\n      .addCase(fetchPosts.rejected, (state) => {\n        state.loader = false;\n        state.error = true;\n      });\n  },\n});\n\nexport const { actions } = postsSlice;\n\nexport default postsSlice.reducer;\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPosts = () => {\n  return client.get<Post[]>('/posts');\n};\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport { Post } from '../../types/Post';\n\nexport type PostState = {\n  post: Post | null,\n};\n\nconst initialState: PostState = {\n  post: null,\n};\n\nconst selectedPostSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {\n    setPost: (state, action: PayloadAction<Post | null>) => {\n      state.post = action.payload;\n    },\n  },\n});\n\nexport const { actions } = selectedPostSlice;\n\nexport default selectedPostSlice.reducer;\n","/* eslint-disable no-param-reassign */\nimport { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { Comment } from '../../types/Comment';\nimport {\n  createComment, getPostComments, deleteComment,\n} from '../../api/comments';\n\nexport const fetchComments = createAsyncThunk(\n  'fetch/COMMENTS',\n  (postId: number) => {\n    return getPostComments(postId);\n  },\n);\n\nexport const fetchAddComment = createAsyncThunk(\n  'fetch/ADD_COMMENT',\n  (newComment: Omit<Comment, 'id'>) => {\n    return createComment(newComment);\n  },\n);\n\nexport const fetchDeleteComment = createAsyncThunk(\n  'fetch/DELETE_COMMENT',\n  (commentId: number) => {\n    return deleteComment(commentId);\n  },\n);\n\nexport interface CommentsState {\n  comments: Comment[] | null,\n  loader: boolean,\n  error: boolean,\n  submitting: boolean,\n}\n\nconst initialState: CommentsState = {\n  comments: null,\n  loader: false,\n  error: false,\n  submitting: false,\n};\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    removeComment: (state, action: PayloadAction<number>) => {\n      if (state.comments) {\n        state.comments = state.comments.filter(comment => {\n          return comment.id !== action.payload;\n        });\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchComments.pending, (state) => {\n        state.loader = true;\n      })\n      .addCase(fetchComments.fulfilled, (state, action) => {\n        state.loader = false;\n        state.comments = action.payload;\n      })\n      .addCase(fetchComments.rejected, (state) => {\n        state.loader = false;\n        state.error = true;\n      })\n      .addCase(fetchAddComment.pending, state => {\n        state.submitting = true;\n      })\n      .addCase(fetchAddComment.fulfilled, (state, action) => {\n        state.submitting = false;\n        state.error = false;\n\n        if (state.comments) {\n          state.comments.push(action.payload);\n\n          return;\n        }\n\n        state.comments = [action.payload];\n      })\n      .addCase(fetchAddComment.rejected, (state) => {\n        state.submitting = false;\n        state.error = true;\n      });\n  },\n});\n\nexport const { actions } = commentsSlice;\n\nexport default commentsSlice.reducer;\n","// import { client } from '../utils/axiosClient';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport usersReducer from '../features/users/usersSlice';\nimport postsReducer from '../features/posts/postsSlice';\nimport selectedPostReducer from '../features/selectedPost/selectedPostSlice';\nimport commentsReducer from '../features/comments/commentsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    users: usersReducer,\n    posts: postsReducer,\n    post: selectedPostReducer,\n    comments: commentsReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n/* eslint-enable @typescript-eslint/indent */\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use these hooks everywhere instead of useDispatch and useSelector\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\nimport { useAppDispatch } from '../app/hooks';\nimport {\n  actions as selectedPostActions,\n} from '../features/selectedPost/selectedPostSlice';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const equalityId = (postId: number, pressedPostId: number) => {\n    return postId === pressedPostId;\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(({\n            id, title, userId, body,\n          }) => (\n            <tr key={id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{id}</td>\n              <td data-cy=\"PostTitle\">{title}</td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': id !== selectedPostId,\n                    },\n                  )}\n                  onClick={() => {\n                    dispatch(selectedPostActions\n                      .setPost(equalityId(id, selectedPostId) ? (\n                        null\n                      ) : (\n                        {\n                          id, title, userId, body,\n                        }\n                      )));\n                  }}\n                >\n                  {equalityId(id, selectedPostId) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\nimport { useAppSelector } from '../app/hooks';\n\ntype Props = {\n  onSubmit: (data: CommentData) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const { submitting } = useAppSelector(state => state.comments);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    onSubmit({ name, email, body });\n\n    setValues(current => ({ ...current, body: '' }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        {/* eslint-disable-next-line jsx-a11y/label-has-associated-control */}\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { CommentData } from '../types/Comment';\nimport { useAppDispatch, useAppSelector } from '../app/hooks';\nimport {\n  actions as commentsActions,\n  fetchAddComment,\n  fetchComments,\n  fetchDeleteComment,\n} from '../features/comments/commentsSlice';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const dispatch = useAppDispatch();\n  const { comments, loader, error } = useAppSelector(state => state.comments);\n\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchComments(post.id));\n    setVisible(false);\n  }, [post.id]);\n\n  const addComment = ({ name, email, body }: CommentData) => {\n    dispatch(fetchAddComment({\n      name, email, body, postId: post.id,\n    }));\n  };\n\n  const deleteComment = (commentId: number) => {\n    dispatch(commentsActions.removeComment(commentId));\n    dispatch(fetchDeleteComment(commentId));\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {post.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {loader && (\n          <Loader />\n        )}\n\n        {!loader && error && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {!loader && !error && comments?.length === 0 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {!loader && !error && !!comments?.length && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments?.map(comment => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {!loader && !error && !visible && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {!loader && !error && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { User } from '../types/User';\nimport { selectUsers } from '../features/users/usersSlice';\n\ntype Props = {\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  value: selectedUser,\n  onChange,\n}) => {\n  const users = useSelector(selectUsers);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    // we save a link to remove the listener later\n    const handleDocumentClick = () => {\n      // we close the Dropdown on any click (inside or outside)\n      // So there is not need to check if we clicked inside the list\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  // we don't want to listening for outside clicks\n  // when the Dopdown is closed\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { fetchUsers } from './features/users/usersSlice';\nimport {\n  actions as postsActions, fetchPosts,\n} from './features/posts/postsSlice';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedPost = useAppSelector(state => state.post.post);\n  const { posts, loader, error } = useAppSelector(state => state.posts);\n\n  const [author, setAuthor] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (author) {\n      dispatch(fetchPosts(author.id));\n    } else {\n      dispatch(postsActions.setNotPosts());\n    }\n  }, [author?.id]);\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector value={author} onChange={setAuthor} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!author && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {author && loader && (\n                  <Loader />\n                )}\n\n                {author && loader && error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {author && !loader && !error && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {author && !loader && !error && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}